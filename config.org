* Strarting
** start up message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** keybindig for ansi-term
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'ansi-term)
(global-set-key (kbd "C-c s" ) 'eshell)
#+END_SRC
* Bell
** Turn off bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
* Bar Mode
** tool bar mode
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** scroll bar mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
* Which Key
** which
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
* Beacon
** package
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
* org mode
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** org export backends
#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
#+END_SRC
* IDO
** install package
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

#+END_SRC
** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* buffers
** enable buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun  config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reload ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
** kds
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* Switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-querty-shortcuts
          '("a", "s", "d", "f", "j", "k", "l", "รง"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* Window splitting function
** horizontally
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC
** vertically
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* Minor settings
** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{. ?\})
                              (?\(. ?\))
                              (?\[. ?\])
                              (?\". ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
** show lines and columns on the mode line
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
* sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-M-รง" . sudo-edit))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+END_SRC
* Org
** Basic config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" . "emacs-lisp"))
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
	       '("article"
		 "\\documentclass{article}"
		 ("\\section{%s}" . "\\section*{%s}")))


#+END_SRC
** Pretty-mode
#+BEGIN_SRC emacs-lisp

  (require 'pretty-mode)
  (global-pretty-mode 0)
#+END_SRC
* Auto completion
** auto-complete
#+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :config
      (require 'auto-complete)
      (require 'auto-complete-config)
      (ac-config-default)
      )
  (defun my:ac-c-header-init ()
    (require 'auto-complete-c-headers)
    (add-to-list 'ac-sources 'ac-source-c-headers)
    (add-to-list 'achead:include-directories '"/usr/include")
    (add-hook 'c++-mode-hook 'my:ac-c-header-init)
    (add-hook 'c++-mode-hook 'my:ac-c-header-init))
#+END_SRC
* Mode line
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode))
#+END_SRC
* tilde
#+BEGIN_SRC emacs-lisp
   (require 'iso-transl)
#+END_SRC
* line numbers
** for version >= 26.0
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
* isearch
#+BEGIN_SRC emacs-lisp
    (put 'view-lossage 'isearch-scroll t)
#+END_SRC
* Sintax highlight
** highlight name fuction
#+BEGIN_SRC emacs-lisp
    (font-lock-add-keywords
     'c-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

    (font-lock-add-keywords
     'c++-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

  (font-lock-add-keywords
     'java-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

  (font-lock-add-keywords
     'python-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))
#+END_SRC
* preferd codification
#+BEGIN_SRC emacs-lisp
    (prefer-coding-system 'utf-8)
#+END_SRC
* Pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :ensure t)
  (use-package org-pdfview
  :ensure t)

  (require 'pdf-tools)
  (require 'org-pdfview)

#+END_SRC

* Golang
#+BEGIN_SRC emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (global-set-key (kbd "C-c c") 'compile)
#+END_SRC
** remove unused imports
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
			    (local-set-key (kbd "C-c C-i") 'go-remove-unused-imports)))
#+END_SRC
** go to imports
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
	    (local-set-key (kbd "C-c i") 'go-goto-imports)))
#+END_SRC
* Custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/themes")
  (load "jbeansa-theme")
#+END_SRC
* Multiple lines cursor
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-c m c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
* Magit
** magit status keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
)
#+END_SRC
** rust checker
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
* eviroment var
#+BEGIN_SRC emacs-lisp
  (setenv "GOOGLE_CLIENT_ID" "608621652614-2qd9a4gbf7gq4eu9god80o8bnh9pm2qq.apps.googleusercontent.com")
  (setenv "GOOGLE_CLIENT_SECRET" "4-LZrLdA26_P5KkIdjky1HUI")
  (setenv "PATH" (concat (getenv "PATH") ":" "/home/augusto/go/bin"))
#+END_SRC
* JavaScript
** js2-mode
#+BEGIN_SRC emacs-lisp
  ;;;Commentary: JS2 mode

  (require 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'". js2-mode))
  (add-to-list 'auto-mode-alist '("\\.json\\'". js2-mode))


  ;;Better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
  (setq js2-mode-show-parse-errors nil)
  (setq js2-mode-show-strict-warnings nil)

#+END_SRC
** js2-refactor & xref-refactor
#+BEGIN_SRC emacs-lisp
  (require 'js2-refactor)
  (require 'xref-js2)

  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)

  (add-hook 'js2-mode-hook (lambda ()
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

(define-key js2-mode-map (kbd "C-k") #'js2r-kill)
#+END_SRC
* Prettier
#+begin_src emacs-lisp
  (require 'prettier-js)
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
  (setq prettier-js-args '(
    "--tab-width 2"
    "--no-semi"
    "--single-quote"
  ))
#+end_src
* Rust
#+begin_src emacs-lisp
(setq rust-format-on-save t)
#+end_src

* flymd
#+begin_src emacs-lisp
 (defun my-flymd-browser-function (url)
   (let ((browse-url-browser-function 'browse-url-firefox))
     (browse-url url)))
 (setq flymd-browser-open-function 'my-flymd-browser-function)
#+end_src
* web-mode
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/web-mode-16.0.25")
  (load "web-mode")
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (require 'web-mode)
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
  )
  (add-hook 'web-mode-hook  'my-web-mode-hook)
(add-hook 'web-mode-hook 'prettier-js-mode)
#+end_src
* Autofill mode
#+begin_src emacs-lisp
  ;;; Commentary:
    ;; Adds a newline when the comment is out of the buffer
    ;;; Code:
    (defun comment-auto-fill ()
	  (setq-local comment-auto-fill-only-comments t)
	  (auto-fill-mode 1))
  (add-hook 'prog-mode-hook 'comment-auto-fill)

#+end_src
* Execution path
#+begin_src emacs-lisp
  (setq exec-path (append exec-path '("/home/augusto/go/bin")))
#+end_src
