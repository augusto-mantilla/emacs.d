* My new map keybinding  
  #+begin_src emacs-lisp
	(define-prefix-command 'my-keys)
	(global-set-key (kbd "C-c m") my-keys)
	(define-key my-keys "i" (lambda ()(interactive) (org-insert-structure-template "src") ))
	(define-key my-keys "a" 'org-agenda)
	(define-key my-keys "c" 'org-schedule)
 #+end_src
** Change C-f and C-b to scroll half a page
* Start up
** start up message 
#+BEGIN_SRC emacs-lisp 
(setq inhibit-startup-message t) 
#+END_SRC 
** Adjust font depending in the pixel density 
#+begin_src emacs-lisp 
  (defun my-font-adjustment () (interactive)
		 (if (<= (face-attribute 'default :height) 98) (set-face-attribute 'default nil :height 100)
		   (set-face-attribute 'default nil :height 95)))
  (global-set-key (kbd "C-c m f") 'my-font-adjustment) 
#+end_src 
** Adding transparency to Emacs 
#+begin_src emacs-lisp 
;;(set-frame-parameter (selected-frame) 'alpha '(85 . 50)) ;; (add-to-list 'default-frame-alist '(alpha . (85 . 50))) 
#+end_src
* Move forward and back a word
  #+begin_src emacs-lisp
	(defun move-forward-a-word ()
	  (interactive)
	  (evil-forward-word-end)
	  (evil-forward-char))

	  (global-set-key (kbd "M-f") 'move-forward-a-word)
	  (global-set-key (kbd "M-b") 'evil-backward-word-begin)
	  (global-set-key (kbd "M-e") 'end-of-line)
	  (global-set-key (kbd "M-a") 'evil-first-non-blank)
  #+end_src
* Save session
  #+begin_src emacs-lisp
	(desktop-save-mode 0)
  #+end_src
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** keybindig for ansi-term
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m t") 'ansi-term)
  (use-package shell-switcher
	:ensure t
	:config (setq shell-switcher-mode t)
	:bind ("<C-iso-lefttab>" . 'shell-switcher-switch-buffer-other-window)
	("<C-M-tab>" . 'shell-switcher-new-shell))
#+END_SRC
* Bell
** Turn off bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function nil)
#+END_SRC
* Bar Mode
** tool bar mode
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** scroll bar mode
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
* Which Key
** which
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:init
	(which-key-mode)
	:config (which-key-setup-side-window-bottom))
#+END_SRC
* Beacon
** package
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
* Org mode
** bullets 
#+BEGIN_SRC emacs-lisp 
	(use-package org-bullets
	  :ensure t
	  :config
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
  ) 
#+END_SRC 
** org export backends 
#+BEGIN_SRC emacs-lisp 
(require 'ox-md) 
#+END_SRC
** Basic config
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist
			   '("el" . "emacs-lisp"))
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
	(setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
			   '("article"
				 "\\documentclass{article}"
				 ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
** Pretty-mode
#+BEGIN_SRC emacs-lisp
  (require 'pretty-mode)
  (global-pretty-mode 0)
;;(setq org-hide-emphasis-markers nil)
(setq org-agenda-files '("~/Documents/agenda/agenda.org"))
#+END_SRC
* Ido
** Install package
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
	("<menu>" . smex)
    ("M-x" . smex))
#+END_SRC
** Switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x C-t") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x C-a") 'ido-switch-buffer-other-window)
#+END_SRC
* Buffers
** enable buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer-other-window)
#+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Ivy
#+begin_src emacs-lisp
  (use-package ivy
	:ensure t
	:config
	:bind
	("C-c m v" . ivy-push-view)
	("C-c m V" . ivy-switch-view))
#+end_src
* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun  config-visit ()
    (interactive)
    (find-file-other-window "~/.emacs.d/config.org"))
	(define-key my-keys "e" 'config-visit)
#+End_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reload ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
	(define-key my-keys "r" 'config-reload)
#+END_SRC
* Rainbow
#+BEGIN_SRC emacs-lisp
	(use-package rainbow-mode
	  :ensure t
  :diminish rainbow-mode)
#+END_SRC
* Switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    ;;(setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-querty-shortcuts
          '("a", "s", "d", "f", "j", "k", "l", ";"))
    :bind
    ([remap other-window] . switch-window))
	(global-set-key (kbd "C-x C-o") 'switch-window)
	(global-set-key (kbd "C-x o") 'delete-blank-lines)
#+END_SRC
* Window splitting function
** horizontally
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x y") 'split-and-follow-horizontally)
#+END_SRC
** vertically
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x x") 'split-and-follow-vertically)
#+END_SRC
** Close current window
   #+begin_src emacs-lisp
	 (defun my-delete-window ()
	   (interactive)
	   (delete-window)
	   (balance-windows))
	 (global-set-key (kbd "C-x w") 'my-delete-window)
   #+end_src
** Close all other windows
   #+begin_src emacs-lisp
	 (global-set-key (kbd "C-x l") 'delete-other-windows)
   #+end_src
* Following opened help
  #+begin_src emacs-lisp
(advice-add 'describe-mode :after '(lambda (&rest args) (call-interactively 'other-window)))
(advice-add 'man :after '(lambda (&rest args) (call-interactively 'other-window)))
(setq help-window-select t)
  #+end_src
* Minor settings
** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{. ?\})
							  (?\(. ?\))
							  (?\[. ?\])
							  (?\". ?\")
							  (?\`. ?\`)))
  (electric-pair-mode t)
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
	(use-package hungry-delete
	  :ensure t
	  :config
	  (global-hungry-delete-mode)
  :diminish hungry-delete)
#+END_SRC
** Tab width
#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src
** Print working directory
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c p") 'pwd)
#+end_src
** Column number
   #+begin_src emacs-lisp
	 (column-number-mode 1)
   #+end_src
* sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c m s" . sudo-edit))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
	:ensure t
	:config
	(setq dashboard-items '((recents . 10)
							(projects . 5))))

  (setq initial-buffer-choice (lambda ()
								(org-agenda-list)
								(delete-other-windows)
								(get-buffer "*Org Agenda*")))    

  (recentf-mode 1)
  (setq dashboard-startup-banner 2)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (setq dashboard-set-footer nil)
  (setq dashboard-set-file-icons t)

  (add-hook 'kill-emacs-hook (lambda () (recentf-save-list)))
  (global-set-key "\C-x\ \C-r" 'recentf-save-list)
#+END_SRC
* Open URLs
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-o") 'org-open-at-point)
#+end_src
* Auto completion
** Company
#+begin_src emacs-lisp
  (use-package company
	:ensure t)
#+end_src	
** Company go
#+begin_src emacs-lisp
  (use-package company-go
	:ensure t
	:config
	(add-hook 'go-mode-hook (lambda ()
							(set (make-local-variable 'company-backend) '(company-go))
							(company-mode)))
	(add-hook 'prog-mode-hook 'company-mode)
	(add-hook 'completion-at-point-functions 'go-complete-at-point))
#+end_src
* Compilation
#+begin_src emacs-lisp
	(global-set-key (kbd "C-c c") 'compile)
#+end_src
** All the icons
#+begin_src emacs-lisp
	(use-package all-the-icons
	  :ensure t)
	(use-package all-the-icons-ibuffer
	:ensure t
	:init (all-the-icons-ibuffer-mode 1)) 
#+end_src
** Diminish
#+BEGIN_SRC emacs-lisp
	(use-package diminish
	  :ensure t
	  :config
	  (diminish 'hungry-delete-mode)
	  (diminish 'beacon-mode)
	  (diminish 'which-key-mode)
	  (diminish 'subword-mode)
	  (diminish 'projectile-mode)
	  (diminish 'flycheck-mode)
	  (diminish 'flyspell-mode)
	  (diminish 'eldoc-mode)
	  (diminish 'auto-fill-mode)
	  (diminish 'company-mode)
	  (diminish 'racer-mode)
	  (diminish 'ivy-mode)
	  (diminish 'auto-revert-mode)
	  (diminish 'undo-tree-mode)
	  (diminish 'rainbow-mode))
#+END_SRC
* Isearch
#+BEGIN_SRC emacs-lisp
    (put 'view-lossage 'isearch-scroll t)
#+END_SRC
* Syntax highlight
** highlight name fuction
#+BEGIN_SRC emacs-lisp
    (font-lock-add-keywords
     'c-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

    (font-lock-add-keywords
     'c++-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

  (font-lock-add-keywords
     'java-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

  (font-lock-add-keywords
     'python-mode
     '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))
#+END_SRC
* preferred codification
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
    (prefer-coding-system 'utf-8)
	(set-fontset-font t '(#x1000 . #xf000) '("all-the-icons" . "iso10646-1"))
#+END_SRC
* Pdf tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :ensure t)

  (use-package org-pdfview
  :ensure t)
#+END_SRC
* Golang
#+BEGIN_SRC emacs-lisp
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
#+END_SRC
** remove unused imports
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
			    (local-set-key (kbd "C-c C-i") 'go-remove-unused-imports)))
#+END_SRC
** go to imports
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
							(local-set-key (kbd "C-c C-k") 'pop-tag-mark)
							(local-set-key (kbd "C-c i") 'go-goto-imports)))
#+END_SRC
* Custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/themes")
  (load "jbeansa-theme")
#+END_SRC
* Magit
  #+begin_src emacs-lisp
	(use-package magit
	  :ensure t
	  :bind ("C-c g" . magit-status))
  #+end_src
* Flycheck
** Installation
#+BEGIN_SRC emacs-lisp
	(use-package flycheck
	  :ensure t
	  :config (add-hook 'prog-mode-hook 'flycheck-mode)
	  :diminish flycheck-mode)

#+END_SRC
** rust checker
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
	:ensure t
	:config
	(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
	(setq company-tooltip-align-annotations t))

  (with-eval-after-load 'rust-mode
	(add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
#+END_SRC
* Flyspell
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
							  (flyspell-prog-mode)))

  (add-hook 'org-mode-hook (lambda () (flyspell-mode)))

  (diminish 'flyspell-mode)
#+end_src
* Environment var
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":" "~/go/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":" "~/.cargo/bin"))
 #+END_SRC
* JavaScript
#+END_SRC
** Prettier
 #+begin_src emacs-lisp
   (use-package prettier-js
	 :ensure t
	 :config 
   (add-hook 'js2-mode-hook 'prettier-js-mode)
   (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
   (setq prettier-js-args '(
	 "--tab-width"
	 "2"
	 "--no-semi"
	 "--single-quote"
   )))
 #+end_src
* Rust
#+begin_src emacs-lisp
  (use-package cargo
	:init
	(add-hook 'rust-mode-hook 'cargo-minor-mode)
	(add-hook 'toml-mode-hook 'cargo-minor-mode)
	:diminish cargo-minor-mode)

  (setq rust-format-on-save t)
  (add-hook 'rust-mode-hook (lambda ()
							  (local-set-key (kbd "C-c C-k") 'pop-tag-mark)
							  (local-set-key (kbd "C-c C-j") 'racer-find-definition)
							  (local-set-key (kbd "C-c C-h") 'racer-find-definition-other-window)))
  (diminish 'racer-mode)
#+end_src
* flymd
#+begin_src emacs-lisp
 (defun my-flymd-browser-function (url)
   (let ((browse-url-browser-function 'browse-url-firefox))
     (browse-url url)))
 (setq flymd-browser-open-function 'my-flymd-browser-function)
#+end_src
* web-mode
#+BEGIN_SRC emacs-lisp
  (defun my-web-mode-hook ()
	"Hooks for Web mode."
	(setq web-mode-markup-indent-offset 2))

  (use-package web-mode
	:ensure t
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(add-hook 'web-mode-hook  'my-web-mode-hook)
	(add-hook 'web-mode-hook 'prettier-js-mode))
#+END_SRC
* Auto fill mode
#+begin_src emacs-lisp
  (defun comment-auto-fill ()
	(setq-local comment-auto-fill-only-comments t)
	(auto-fill-mode 1))
  (add-hook 'prog-mode-hook 'comment-auto-fill)
  (add-hook 'prog-mode-hook (lambda () (diminish 'auto-fill-function)))
#+end_src
* Execution path
#+begin_src emacs-lisp
  (setq exec-path (append exec-path '("/home/augusto/go/bin")))
  (setq exec-path (append exec-path '("~/.cargo/bin")))
#+end_src
* Line numbers 
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)

  (global-display-line-numbers-mode)

  (defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
	"Major modes on which to disable the linum mode, exempts them from global requirement"
	:group 'display-line-numbers
	:type 'list
	:version "green")

  (defun display-line-numbers--turn-on ()
	"turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
	(if (and
		 (not (member major-mode display-line-numbers-exempt-modes))
		 (not (minibufferp)))
		(display-line-numbers-mode)))

  (global-display-line-numbers-mode)
#+end_src
* Yalm mode
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs-local-packages/yaml-mode")
  (load "yaml-mode")
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml?\\'". yaml-mode))
  (add-hook 'yaml-mode-hook
			'(lambda ()
			   (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src
* Evil
** General
#+begin_src emacs-lisp
  (use-package evil
	:ensure t
	:init
	(setq evil-want-keybinding nil)
	(setq evil-disable-insert-state-bindings t)
	:config
	(evil-mode 1)
	(setq evil-want-fine-undo t)
	(evil-global-set-key 'normal "\C-f" 'evil-scroll-down)
	(evil-global-set-key 'normal "\C-b" 'evil-scroll-up))

  (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init 'ibuffer)
	(evil-collection-init 'calendar)
	(evil-collection-init 'messages)
	(evil-collection-init 'custom))


  (use-package undo-tree
	:ensure t
	:diminish undo-tree-mode
	:config (global-undo-tree-mode)
	(evil-set-undo-system 'undo-tree))
#+end_src
** Surround text
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode t))
#+end_src
** Cursor by state
#+begin_src emacs-lisp
	  (setq evil-emacs-state-cursor '(box "#00EAFF")
				   evil-normal-state-cursor '(box "#fff")
				   evil-insert-state-cursor '(box "#00EAFF")
				   evil-visual-state-cursor '(box "#999999"))
  ;; (setq evil-insert-state-map (make-sparse-keymap))
  ;; (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
#+end_src
** multiple cursor 
#+begin_src emacs-lisp
  (use-package evil-mc
	:ensure t
	:config
	(global-evil-mc-mode 1))
#+End_src
** Emacs initial state
#+begin_src emacs-lisp 
  ;; (evil-set-initial-state 'eshell-mode 'emacs)
  ;; (evil-set-initial-state 'dashboard-mode 'emacs)
  ;; (evil-set-initial-state 'term-mode 'emacs)
#+end_src
* Projectile
  #+begin_src emacs-lisp
	(use-package projectile
	  :ensure t
	  :diminish projectile-mode
	  :config 
	  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
	  (projectile-mode +1))
  #+end_src
* Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
* Highlight the current line in the buffer
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'hl-line-mode)
  (add-hook 'dashboard-mode-hook 'hl-line-mode)
  (setq hl-line-sticky-flag nil)
#+end_src
* Ediff
  #+begin_src emacs-lisp
	(setq ediff-window-setup-function 'ediff-setup-windows-plain)
	(setq ediff-split-window-function 'split-window-vertically)
  #+end_src
* Expand region
   #+begin_src emacs-lisp
	 (use-package expand-region
	   :ensure t
	   :bind
	   ("C-c m o" . er/contract-region)
	   ("C-c m x" . er/expand-region))
   #+end_src
   
* Switch between normal mode keys when using workman layout and qwerty
  #+begin_src emacs-lisp
	(defun activate-workman () (interactive)
		   (evil-define-key '(normal visual operator motion) 'global
			 "y" 'evil-backward-char
			 "n" 'evil-next-line
			 "N" 'evil-join
			 "e" 'evil-previous-line
			 "o" 'evil-forward-char
			 "k" 'evil-open-below
			 "K" 'evil-open-above
			 "l" 'evil-forward-word-end
			 "L" 'evil-forward-WORD-end
			 "j" 'evil-yank
			 "J" 'evil-yank-line
			 "h" 'evil-search-next
			 "H" 'evil-search-previous))
	(global-set-key (kbd "C-c m w") 'activate-workman)

	(defun desactivate-workman () (interactive)
		   (evil-define-key '(normal visual operator motion) 'global
			 "h" 'evil-backward-char
			 "j" 'evil-next-line
			 "J" 'evil-join
			 "k" 'evil-previous-line
			 "l" 'evil-forward-char
			 "o" 'evil-open-below
			 "O" 'evil-open-above
			 "e" 'evil-forward-word-end
			 "E" 'evil-forward-WORD-end
			 "y" 'evil-yank
			 "Y" 'evil-yank-line
			 "n" 'evil-search-next
			 "N" 'evil-search-previous))
	(global-set-key (kbd "C-c m q") 'desactivate-workman)

	(evil-define-key '(normal visual operator motion) 'global
	  "{" 'beginning-of-defun
	  "}" 'end-of-defun)
  #+end_src
* indent region
  #+begin_src emacs-lisp
	(evil-global-set-key 'visual (kbd "TAB" ) 'indent-region)
  #+end_src
* Emojify
  #+begin_src emacs-lisp
	(use-package emojify
	  :ensure t
	  :config (add-hook 'after-init-hook #'global-emojify-mode))
  #+end_src 
* Eshell
** Prompt
   #+begin_src emacs-lisp
	 (defun abbreviate-path (path)
	   (if (string= path "/") "/"
		 (car (last (split-string path "/")))))

	 (setq eshell-prompt-function
		   (lambda ()
			 (concat
			  (abbreviate-path (abbreviate-file-name ( eshell/pwd)))
			  (if (= (user-uid) 0) " # " " $ "))))
   #+end_src
** Clear buffer
   #+begin_src emacs-lisp
	 (add-hook 'eshell-mode-hook
				 (lambda () (local-set-key (kbd "C-l")
								(lambda ()
								  (interactive)
								  (eshell/clear 1)
								  (eshell-emit-prompt)))))
   #+end_src
