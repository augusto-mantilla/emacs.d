* Stop native compilation warnings
  #+begin_src emacs-lisp
	(setq comp-async-report-warnings-errors nil)
  #+end_src
* My new map keybinding
  #+begin_src emacs-lisp
	(define-prefix-command 'my-keys)
	(global-set-key (kbd "C-c m") my-keys)

	(with-eval-after-load 'org
	  (define-key my-keys "a" 'org-agenda)
	  (define-key my-keys "c" 'org-schedule))
  #+end_src
* Start up
** Don't show the startup message
   #+begin_src emacs-lisp
	 (setq inhibit-startup-message t)
   #+end_src
** Add function to toggle between font sizes
   #+begin_src emacs-lisp
	 (defun my-font-adjustment () (interactive)
			(if (<= (face-attribute 'default :height) 115) (set-face-attribute 'default nil :height 120)
			  (set-face-attribute 'default nil :height 110)))
	 (global-set-key (kbd "C-c m f") 'my-font-adjustment)
   #+end_src
* Terminal
** Setting default shell to bash
   #+begin_src emacs-lisp
	 (defvar my-term-shell "/bin/bash")
	 (defadvice ansi-term (before force-bash)
	   (interactive (list my-term-shell)))
	 (ad-activate 'ansi-term)
   #+end_src
** keybinding for ansi-term
   #+begin_src emacs-lisp
	 (global-set-key (kbd "C-c m t") 'ansi-term)
	 (use-package shell-switcher
	   :ensure t
	   :config (setq shell-switcher-mode t)
	   :bind ("<C-iso-lefttab>" . 'shell-switcher-switch-buffer-other-window)
	   ("<C-M-tab>" . 'shell-switcher-new-shell))
   #+end_src
* Bell
** Turn off bell
   #+begin_src emacs-lisp
	 (setq ring-bell-function nil)
   #+end_src
* Bar Mode
** No tool bar
   #+begin_src emacs-lisp
	 (tool-bar-mode -1)
   #+end_src
** No menu bar
   #+begin_src emacs-lisp
	 (menu-bar-mode -1)
   #+end_src
** No scroll bar
   #+begin_src emacs-lisp
	 (scroll-bar-mode -1)
   #+end_src
* Which Key
  Show a list of the available keys associated with commands
** which
   #+begin_src emacs-lisp
	 (use-package which-key
	   :ensure t
	   :config
	   (which-key-mode)
	   (which-key-setup-side-window-bottom))
   #+end_src
* Beacon
** Make a small animation highlighting the position of the cursor when changing buffers
   #+begin_src emacs-lisp
	 (use-package beacon
	   :ensure t
	   :config
	   (beacon-mode 1))
   #+end_src
* Org mode
  Install and configure the org-mode package
  #+begin_src emacs-lisp
	(use-package org
	  :pin org
	  :ensure t
	  :config
	  (setq org-startup-folded t)
	  (setq org-ellipsis " ▼")
	  (setq org-agenda-files '("~/Documents/agenda/agenda.org")))

	(with-eval-after-load 'org
	  ;; This is needed as of Org 9.2
	  (require 'org-tempo)

	  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	  (add-to-list 'org-structure-template-alist '("rs" . "src rust")))
  #+end_src
** Agenda notifications
   #+begin_src emacs-lisp
	 (use-package org-wild-notifier
	   :ensure t
	   :config
	   (setq alert-default-style 'libnotify))
   #+end_src
** bullets
   #+begin_src emacs-lisp
	 (use-package org-bullets
	   :after org
	   :ensure t
	   :config
	   (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
	   :custom
	   (org-bullets-bullet-list '("○")))
   #+end_src
** Latex config
   #+begin_src emacs-lisp
	 (with-eval-after-load 'org
	   (require 'ox-latex)
	   (unless (boundp 'org-latex-classes)
		 (setq org-latex-classes nil))
	   (add-to-list 'org-latex-classes
					'("article"
					  "\\documentclass{article}"
					  ("\\section{%s}" . "\\section*{%s}"))))
   #+end_src
** Give presentations using org mode
   #+begin_src emacs-lisp
	 (defun present-start()
	   (org-display-inline-images)
	   (setq text-scale-mode-amount 3)
	   (text-scale-mode t)
	   (display-line-numbers-mode 0))

	 (defun present-end()
	   (display-line-numbers-mode t)
	   (text-scale-mode 0))

	 (use-package org-tree-slide
	   :hook ((org-tree-slide-play . present-start)
			  (org-tree-slide-stop . present-end))
	   :custom
	   (org-image-actual-width nil))
   #+end_src
** Babel configuration
*** Included with org babel
	#+begin_src emacs-lisp
	  (org-babel-do-load-languages 'org-babel-load-languages
		  '(
			  (shell . t)
			  (emacs-lisp . t)
			  (js . t)
		  )
	  )
	#+end_src
*** Babel for rust code
	#+begin_src emacs-lisp
	  (defun org-babel-execute:rust (body params)
		(ob-rust-eval (ob-rust-prep body)))

	  (defun ob-rust-eval (body)
		(let ((src-tmp (org-babel-temp-file "rust-"))
			  (output-tmp (org-babel-temp-file "rustc-")))
		  (with-temp-file src-tmp (insert body))
		  (shell-command-to-string
		   (format "rustc -A dead_code -o %s %s && %s"
				   output-tmp src-tmp output-tmp))))

	  (defun ob-rust-prep (body)
		(with-current-buffer (get-buffer-create "*ob-rust-src*")
		  (erase-buffer)
		  (insert "fn main() {\n")
		  (insert body)
		  (goto-char (point-max))
		  (beginning-of-line)
		  (while (looking-at "\\(^[\t ]*//\\|^[\t ]*$\\)")
			(forward-line -1))
		  (if (looking-at "[\t ]*\\(println\\|}\\)")
			  (end-of-line)
			(insert "println!(\"{:?}\", ")
			(when (search-forward-regexp ";[\t ]*$" nil t)
			  (replace-match "" t t))
			(end-of-line)
			(insert ");"))
		  (insert "\n}")
		  (buffer-string)))
	#+end_src
* Ido
  Enable *Ido* (Interactive do) to enabling matching string name while typing buffer and file name and any other place where it makes sense
  #+begin_src emacs-lisp
	(setq ido-enable-flex-matching t)
	(setq ido-create-new-buffer 'always)
	(setq ido-everywhere t)
	(ido-mode 1)
  #+end_src
** Switch buffers
   All the different ways to change buffers and opening files
   #+begin_src emacs-lisp
	 (global-set-key (kbd "C-x C-f") 'ido-find-file)
	 (global-set-key (kbd "C-x C-t") 'ido-find-file-other-window)
	 (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
	 (global-set-key (kbd "C-x C-a") 'ido-switch-buffer-other-window)
	 (global-set-key (kbd "C-x b") 'ibuffer-other-window)
   #+end_src
** Smex
   Command launcher in Emacs
   #+begin_src emacs-lisp
	 (use-package smex
	   :ensure t
	   :init (smex-initialize)
	   :bind
	   ("<menu>" . smex)
	   ("M-x" . smex))
   #+end_src
* Buffers
** Always kill current buffer
   #+begin_src emacs-lisp
	 (defun kill-current-buffer ()
	   (interactive)
	   (kill-buffer (current-buffer)))
	 (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+end_src
** Kill all buffers
   #+begin_src emacs-lisp
	 (defun kill-all-buffers ()
	   (interactive)
	   (mapc 'kill-buffer (buffer-list)))
	 (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
   #+end_src
* Avy
  Receives character and highlights it in the screen giving some hints with a list of characters in it.
  Inserting the character jumps the cursor to that position
  #+begin_src emacs-lisp
	(use-package avy
	  :ensure t
	  :bind
	  ("M-s" . avy-goto-char))
  #+end_src
* Ivy
  #+begin_src emacs-lisp
	(use-package ivy
	  :ensure t
	  :config
	  :bind
	  ("C-c m v" . ivy-push-view)
	  ("C-c m V" . ivy-switch-view))
  #+end_src
* Config edit/reload
** edit
   #+begin_src emacs-lisp
	 (defun  config-visit ()
	   (interactive)
	   (find-file-other-window "~/.emacs.d/config.org"))
	 (define-key my-keys "e" 'config-visit)
   #+End_SRC
** reload
   #+begin_src emacs-lisp
	 (defun config-reload ()
	   "Reload ~/.emacs.d/config.org at runtime"
	   (interactive)
	   (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
	 (define-key my-keys "r" 'config-reload)
   #+end_src
* Rainbow
  #+begin_src emacs-lisp
	(use-package rainbow-mode
	  :commands rainbow-mode
	  :ensure t
	  :diminish rainbow-mode)
  #+end_src
* Switch-window
  #+begin_src emacs-lisp
	(use-package switch-window
	  :ensure t
	  :config
	  ;;(setq switch-window-input-style 'minibuffer)
	  (setq switch-window-increase 4)
	  (setq switch-window-threshold 2)
	  (setq switch-window-shortcut-style 'qwerty)
	  (setq switch-window-querty-shortcuts
			'("a", "s", "d", "f", "j", "k", "l", ";"))
	  :bind
	  ([remap other-window] . switch-window))
	(global-set-key (kbd "C-x C-o") 'switch-window)
	(global-set-key (kbd "C-x o") 'delete-blank-lines)
  #+end_src
* Window splitting function
** horizontally
   #+begin_src emacs-lisp
	 (defun split-and-follow-horizontally ()
	   (interactive)
	   (split-window-below)
	   (balance-windows)
	   (other-window 1))
	 (global-set-key (kbd "C-x y") 'split-and-follow-horizontally)
   #+end_src
** vertically
   #+begin_src emacs-lisp
	 (defun split-and-follow-vertically ()
	   (interactive)
	   (split-window-right)
	   (balance-windows)
	   (other-window 1))
	 (global-set-key (kbd "C-x x") 'split-and-follow-vertically)
   #+end_src
** Close current window
   #+begin_src emacs-lisp
	 (defun my-delete-window ()
	   (interactive)
	   (delete-window)
	   (balance-windows))
	 (global-set-key (kbd "C-x w") 'my-delete-window)
   #+end_src
** Close all other windows
   #+begin_src emacs-lisp
	 (global-set-key (kbd "C-x l") 'delete-other-windows)
   #+end_src
* Following opened help
  When opening the help and man buffers the cursor moves automatically to those buffers
  This needs to be added because by default the cursor stays in the current buffer instead of getting to the new one
  #+begin_src emacs-lisp
	(advice-add 'describe-mode :after '(lambda (&rest args) (call-interactively 'other-window)))
	(advice-add 'man :after '(lambda (&rest args) (call-interactively 'other-window)))
	(setq help-window-select t)
  #+end_src
* Minor settings
** Subword
   #+begin_src emacs-lisp
	 (global-subword-mode 1)
   #+end_src
** electric
   #+begin_src emacs-lisp
	 (setq electric-pair-pairs '((?\{. ?\})
								 (?\(. ?\))
								 (?\[. ?\])
								 (?\". ?\")
								 (?\`. ?\`)))
	 (electric-pair-mode t)
   #+end_src
** Hungry Delete
   #+begin_src emacs-lisp
	 (use-package hungry-delete
	   :ensure t
	   :config
	   (global-hungry-delete-mode)
	   :diminish hungry-delete)
   #+end_src
** Tab width
   #+begin_src emacs-lisp
	 (setq-default tab-width 4)
   #+end_src
** Print working directory
   #+begin_src emacs-lisp
	 (global-set-key (kbd "C-c p") 'pwd)
   #+end_src
** Column number
   #+begin_src emacs-lisp
	 (column-number-mode 1)
   #+end_src
* sudo edit
  Edit files with root permissions in the same session
  #+begin_src emacs-lisp
	(use-package sudo-edit
	  :ensure t
	  :bind ("C-c m s" . sudo-edit))
  #+end_src
* Auto completion
** Company
   #+begin_src emacs-lisp
	 (use-package company
	   :hook (prog-mode . company-mode)
	   :diminish company-mode
	   :ensure t)
   #+end_src
* Compilation
  #+begin_src emacs-lisp
	(global-set-key (kbd "C-c c") 'compile)
  #+end_src
** All the icons
   #+begin_src emacs-lisp
	 (use-package all-the-icons
	   :ensure t)

	 (use-package all-the-icons-ibuffer
	   :after all-the-icons
	   :ensure t
	   :init (all-the-icons-ibuffer-mode 1))
   #+end_src
** Diminish
   #+begin_src emacs-lisp
	 (use-package diminish
	   :ensure t
	   :config
	   (diminish 'hungry-delete-mode)
	   (diminish 'beacon-mode)
	   (diminish 'which-key-mode)
	   (diminish 'subword-mode)
	   (diminish 'projectile-mode)
	   (diminish 'eldoc-mode)
	   (diminish 'company-mode)
	   (diminish 'ivy-mode)
	   (diminish 'auto-revert-mode)
	   (diminish 'undo-tree-mode)
	   (diminish 'rainbow-mode))
   #+end_src
* Isearch
  #+begin_src emacs-lisp
	(put 'view-lossage 'isearch-scroll t)
  #+end_src
* Syntax highlight
** highlight name function
   #+begin_src emacs-lisp
	 (font-lock-add-keywords
	  'c-mode
	  '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

	 (font-lock-add-keywords
	  'c++-mode
	  '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

	 (font-lock-add-keywords
	  'java-mode
	  '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))

	 (font-lock-add-keywords
	  'python-mode
	  '(("\\<\\(\\sw+\\) ?(" 1 'font-lock-function-name-face)))
   #+end_src
* Set UTF-8 as the preferred configuration
  #+begin_src emacs-lisp
	(set-default-coding-systems 'utf-8)
	(prefer-coding-system 'utf-8)
	(set-fontset-font t '(#x1000 . #xf000) '("all-the-icons" . "iso10646-1"))
  #+end_src
* COMMENT Pdf tools
  #+begin_src emacs-lisp
	;; (use-package pdf-tools
	;;   :defer t
	;;   :ensure t)

	;; (use-package org-pdfview
	;;   :after org
	;;   :ensure t)
  #+end_src
* Golang
** Format before save
  #+begin_src emacs-lisp
	(setq gofmt-command "goimports")
	(add-hook 'before-save-hook 'gofmt-before-save)
  #+end_src
** Remove unused imports
   #+begin_src emacs-lisp
	 (add-hook 'go-mode-hook (lambda ()
							   (local-set-key (kbd "C-c C-i") 'go-remove-unused-imports)))
   #+end_src
** Define local key maps for go mode
   #+begin_src emacs-lisp
	 (add-hook 'go-mode-hook (lambda ()
							   (define-key evil-normal-state-local-map (kbd "g b") 'pop-tag-mark)
							   (define-key evil-normal-state-local-map (kbd "g d") 'godef-jump)
							   (define-key evil-normal-state-local-map (kbd "g i") 'go-goto-imports)))
   #+end_src
** Auto completion
   #+begin_src emacs-lisp
	 (use-package company-go
	   :hook (go-mode . company-mode)
	   :ensure t
	   :config
	   (add-hook 'go-mode-hook (lambda ()
								 (set (make-local-variable 'company-backend) '(company-go))
								 (company-mode)))
	   (add-hook 'completion-at-point-functions 'go-complete-at-point))
   #+end_src
* Rename Custom theme
  #+begin_src emacs-lisp
	(add-to-list 'load-path "~/.emacs.d/themes")
	(load "darker-theme")
	(load-theme 'darker t)
  #+end_src
* Magit
  A complete text-based interface to Git
  #+begin_src emacs-lisp
	(use-package magit
	  :ensure t
	  :bind ("C-c g" . magit-status))
  #+end_src
* Flycheck
  Highlight errors and warning for multiple programming languages
  #+begin_src emacs-lisp
	(use-package flycheck
	  :hook (prog-mode . flycheck-mode)
	  :ensure t
	  :diminish flycheck-mode " Φ"
	  :config
	  (define-key flycheck-mode-map flycheck-keymap-prefix nil)
	  (setq flycheck-keymap-prefix (kbd "C-c f"))
	  (define-key flycheck-mode-map flycheck-keymap-prefix
		flycheck-command-map))
  #+end_src
* Flyspell
  Check the spelling of a buffer automatically and highlight the spelling mistakes
  #+begin_src emacs-lisp
	(add-hook 'prog-mode-hook (lambda ()
								(flyspell-prog-mode)
								(diminish 'flyspell-mode " α")))

	(add-hook 'org-mode-hook (lambda () (flyspell-mode)(diminish 'flyspell-mode " α")))
  #+end_src
* Add cargo and go paths to the PATH environment variable
  Even though the go/bin and .cargo/bin are added in the bash PATH variable. Emacs it's not updating its internal PATH environment variable and to the execution path variable
  #+begin_src emacs-lisp
	(setenv "PATH" (concat (getenv "PATH") ":" "~/go/bin"))
	(setenv "PATH" (concat (getenv "PATH") ":" "~/.cargo/bin"))
	(setq exec-path (append exec-path '("~/go/bin")))
	(setq exec-path (append exec-path '("~/.cargo/bin")))
  #+end_src
* Language Server
  This mode enables the communication between Emacs and language servers for different programming languages to give extra functionality like intelligent completion, jump to definitions, show references and many more.
  To make use the lsp-mode one should install the language server specific for each programming language.
  For more information check the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][lsp-mode documentation]]
  #+begin_src emacs-lisp
	(use-package lsp-mode
	  :ensure t
	  :commands (lsp lsp-deferred)
	  :hook (lsp-mode . (lambda () (define-key evil-normal-state-local-map (kbd "g d") 'lsp-find-definition)
						  (define-key evil-normal-state-local-map (kbd "g a") 'lsp-find-references)
						  (define-key evil-normal-state-local-map (kbd "g b") 'pop-tag-mark)))
	  :init
	  (setq lsp-headerline-breadcrumb-enable nil)
	  (setq lsp-enable-symbol-highlighting nil)
	  (setq lsp-keymap-prefix "C-c l")
	  :diminish lsp-mode "LSP"
	  :config
	  (lsp-enable-which-key-integration t))
  #+end_src
* JavaScript and TypeScript
** Activate the language server for JavaScript
   #+begin_src emacs-lisp
	 (add-hook 'js-mode-hook (lambda () (lsp-deferred)))
   #+end_src
** Typescript server
   #+begin_src emacs-lisp
	 (use-package typescript-mode
	   :mode "\\.ts\\'"
	   :hook (typescript-mode . lsp-deferred)
	   :config
	   (setq typescript-indent-level 2))
   #+end_src
** Prettier configuration
   #+begin_src emacs-lisp
	 (use-package prettier-js
	   :hook (js-mode . prettier-js-mode)
	   :ensure t
	   :diminish prettier-js-mode "pjs"
	   :config
	   (setq prettier-js-args '(
								"--tab-width"
								"2"
								"--no-semi"
								"--single-quote"
								"--arrow-parens"
								"avoid"
								)))
   #+end_src
* Rust
  #+begin_src emacs-lisp
	(use-package rust-mode
	  :ensure t
	  :init
	  (setq racer-rust-src-path
			(concat (string-trim
					 (shell-command-to-string "rustc --print sysroot"))
					"/lib/rustlib/src/rust/library"))
	  :config
	  (add-hook 'rust-mode-hook #'racer-mode)
	  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
	  (setq company-tooltip-align-annotations t))

	(use-package cargo
	  :after rust-mode
	  :init
	  (add-hook 'rust-mode-hook 'cargo-minor-mode)
	  (add-hook 'rust-mode-hook (lambda () (diminish 'racer-mode)))
	  (add-hook 'toml-mode-hook 'cargo-minor-mode)
	  :diminish cargo-minor-mode)

	(with-eval-after-load 'rust-mode
	  (setq rust-format-on-save t)
	  (add-hook 'rust-mode-hook (lambda ()
								  (define-key evil-normal-state-local-map (kbd "g b") 'pop-tag-mark)
								  (define-key evil-normal-state-local-map (kbd "g d") 'racer-find-definition)
								  (define-key evil-normal-state-local-map (kbd "g o") 'racer-find-definition-other-window)
								  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
								  (add-hook 'racer-mode-hook #'eldoc-mode)
								  (add-hook 'racer-mode-hook #'company-mode))))
  #+end_src
* web-mode
  #+begin_src emacs-lisp
	(defun my-web-mode-hook ()
	  "Hooks for Web mode."
	  (setq web-mode-markup-indent-offset 2))

	(use-package web-mode
	  :mode "\\.html?\\'"
	  :ensure t
	  :config
	  (add-hook 'web-mode-hook 'my-web-mode-hook)
	  (add-hook 'web-mode-hook 'prettier-js-mode))
  #+end_src
* Line break after 80 characters in each line of comments
  #+begin_src emacs-lisp
	(defun comment-auto-fill ()
	  (setq-local comment-auto-fill-only-comments t)
	  (auto-fill-mode 1))
	(add-hook 'prog-mode-hook 'comment-auto-fill)
	(add-hook 'prog-mode-hook (lambda () (diminish 'auto-fill-function)))
  #+end_src
* Line numbers
  #+begin_src emacs-lisp
	(setq display-line-numbers-type 'relative)

	(require 'display-line-numbers)

	(defcustom display-line-numbers-exempt-modes '(vterm-mode
												   eshell-mode
												   shell-mode
												   term-mode
												   cargo-process-mode
												   ansi-term-mode
												   eww-mode
												   compilation-mode
												   ripgrep-search-mode
												   grep-mode
												   Custom-mode
												   xref--xref-buffer-mode
												   help-mode)
	  "Major modes on which to disable the linum mode, exempts them from global requirement"
	  :group 'display-line-numbers
	  :type 'list
	  :version "green")

	(defun display-line-numbers--turn-on ()
	  "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
	  (if (and
		   (not (member major-mode display-line-numbers-exempt-modes))
		   (not (minibufferp)))
		  (display-line-numbers-mode)))

	(global-display-line-numbers-mode)
  #+end_src
* Evil
** General
   #+begin_src emacs-lisp
	 (use-package evil
	   :ensure t
	   :init
	   (setq evil-want-keybinding nil)
	   (setq evil-disable-insert-state-bindings t)
	   :config
	   (evil-mode 1)
	   (setq evil-want-fine-undo t)
	   (evil-global-set-key 'normal "*" 'isearch-forward-symbol-at-point)
	   (evil-global-set-key 'normal "{" 'beginning-of-defun)
	   (evil-global-set-key 'normal "}" 'end-of-defun))

	 (use-package evil-collection
	   :after evil
	   :ensure t
	   :config
	   (evil-collection-init 'ibuffer)
	   (evil-collection-init 'calendar)
	   (evil-collection-init 'messages)
	   (evil-collection-init 'custom))

	 (use-package undo-tree
	   :after evil
	   :ensure t
	   :diminish undo-tree-mode
	   :config (global-undo-tree-mode)
	   (evil-set-undo-system 'undo-tree))
   #+end_src
*** Switch between normal mode keys when using workman layout and qwerty
	#+begin_src emacs-lisp
	  (with-eval-after-load 'evil
		(defun activate-workman () (interactive)
			   (evil-define-key '(normal visual operator motion) 'global
				 "y" 'evil-backward-char
				 "n" 'evil-next-line
				 "N" 'evil-join
				 "e" 'evil-previous-line
				 "o" 'evil-forward-char
				 "k" 'evil-open-below
				 "K" 'evil-open-above
				 "l" 'evil-forward-word-end
				 "L" 'evil-forward-WORD-end
				 "j" 'evil-yank
				 "J" 'evil-yank-line
				 "h" 'evil-search-next
				 "H" 'evil-search-previous))
		(global-set-key (kbd "C-c m w") 'activate-workman)

		(defun desactivate-workman () (interactive)
			   (evil-define-key '(normal visual operator motion) 'global
				 "h" 'evil-backward-char
				 "j" 'evil-next-line
				 "J" 'evil-join
				 "k" 'evil-previous-line
				 "l" 'evil-forward-char
				 "o" 'evil-open-below
				 "O" 'evil-open-above
				 "e" 'evil-forward-word-end
				 "E" 'evil-forward-WORD-end
				 "y" 'evil-yank
				 "Y" 'evil-yank-line
				 "n" 'evil-search-next
				 "N" 'evil-search-previous))
		(global-set-key (kbd "C-c m q") 'desactivate-workman))
	#+end_src
*** indent region using tab in evil visual mode
	#+begin_src emacs-lisp
	  (evil-global-set-key 'visual (kbd "TAB" ) 'indent-region)
	#+end_src
** Surround text
   #+begin_src emacs-lisp
	 (use-package evil-surround
	   :after evil
	   :ensure t
	   :config
	   (global-evil-surround-mode t))
   #+end_src
** Cursor by state
   #+begin_src emacs-lisp
	 (setq evil-emacs-state-cursor '(box "#00EAFF")
		   evil-normal-state-cursor '(box "#fff")
		   evil-insert-state-cursor '(box "#00EAFF")
		   evil-visual-state-cursor '(box "#999999"))
   #+end_src
** multiple cursor
   #+begin_src emacs-lisp
	 (use-package evil-mc
	   :after evil
	   :ensure t
	   :config
	   (global-evil-mc-mode 1))
   #+End_src
* Projectile
  #+begin_src emacs-lisp
	(use-package projectile
	  :ensure t
	  :diminish projectile-mode
	  :config
	  (projectile-mode +1)
	  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
	  (define-key projectile-command-map (kbd "s") 'projectile-ripgrep))
  #+end_src
* Markdown mode
  #+begin_src emacs-lisp
	(use-package markdown-mode
	  :ensure t
	  :commands (markdown-mode gfm-mode)
	  :mode (("README\\.md\\'" . gfm-mode)
			 ("\\.md\\'" . markdown-mode)
			 ("\\.markdown\\'" . markdown-mode))
	  :init (setq markdown-command "multimarkdown"))
  #+end_src
* Ediff
  #+begin_src emacs-lisp
	(setq ediff-window-setup-function 'ediff-setup-windows-plain)
	(setq ediff-split-window-function 'split-window-vertically)
  #+end_src
* Expand region
  #+begin_src emacs-lisp
	(use-package expand-region
	  :ensure t
	  :bind
	  ("C-c m o" . er/contract-region)
	  ("C-c m x" . er/expand-region))
  #+end_src
* Emojify
  #+begin_src emacs-lisp
	(use-package emojify
	  :defer t
	  :ensure t
	  :custom
	  (emojify-composed-text-p nil)
	  (emojify-display-style 'image)
	  (emojify-emoji-styles '(unicode))
	  :config (add-hook 'after-init-hook #'global-emojify-mode))
  #+end_src
* EShell
** Prompt
   #+begin_src emacs-lisp
	 (defun abbreviate-path (path)
	   (if (string= path "/") "/"
		 (car (last (split-string path "/")))))

	 (setq eshell-prompt-function
		   (lambda ()
			 (concat
			  (abbreviate-path (abbreviate-file-name ( eshell/pwd)))
			  (if (= (user-uid) 0) " # " " $ "))))
   #+end_src
** Clear buffer
   #+begin_src emacs-lisp
	 (add-hook 'eshell-mode-hook
			   (lambda () (local-set-key (kbd "C-l")
										 (lambda ()
										   (interactive)
										   (eshell/clear 1)
										   (eshell-emit-prompt)))))
   #+end_src
* Emacs startup debug
  #+begin_src emacs-lisp
	(setq esup-depth 0)
  #+end_src
* Ripgrep
  #+begin_src emacs-lisp
	(use-package ripgrep
	  :ensure t)
	(define-key evil-normal-state-map (kbd "g s") 'ripgrep-regexp)
  #+end_src
* Wgrep
  Make grep and Ripgrep Emacs buffers into writable buffers and allows to make changes and save them from the grep buffers, this makes find and replace across multiple files so much efficient
  You can edit the text in the grep buffer after typing C-c C-p . After that the changed text is highlighted. The following keybindings are defined:

  - C-c C-e: Apply the changes to file buffers.

  - C-c C-u: All changes are unmarked and ignored.

  - C-c C-d: Mark as delete to current line (including newline).

  - C-c C-r: Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.)

  - C-c C-p: Toggle read-only area.

  - C-c C-k: Discard all changes and exit.

  - C-x C-q: Exit wgrep mode.

  To save all buffers that wgrep has changed, run

  M-x wgrep-save-all-buffers
  To save buffer automatically when wgrep-finish-edit.
  (setq wgrep-auto-save-buffer t)
  You can change the default key binding to switch to wgrep.
  (setq wgrep-enable-key "r")
  To apply all changes regardless of whether or not buffer is read-only.
  (setq wgrep-change-readonly-file t)

  #+begin_src emacs-lisp
	(use-package wgrep
	  :ensure t)
  #+end_src

* COMMENT Epresent
  #+begin_src emacs-lisp
	;;(package-install-file "~/.emacs-local-packages/epresent/epresent.el")
  #+end_src
